#include "HackerDetector.h"

using namespace std;
HackerDetector::HackerDetector() : IModule(0, Category::EXPLOIT, "Detects if other players are hacking (may false flag with Low FPS/Lag)") {
	registerBoolSetting("Immobile Check", &immobileCheck, immobileCheck);
	registerBoolSetting("Speed Check", &speedCheck, speedCheck);
	registerBoolSetting("Derp Check", &derpCheck, derpCheck);
	registerBoolSetting("Fly Check", &flyCheck, flyCheck);
	registerBoolSetting("Regen Check", &regenCheck, regenCheck);
	registerBoolSetting("Aura Check", &auraCheck, auraCheck);
	registerIntSetting("Strictness", &strictness, strictness, 0, 5);
}

const char* HackerDetector::getModuleName() {
	return ("HackerDetector");
}

void HackerDetector::onEnable() {
	timesFailedSpeed = 1;
	timesFailedDerp = 1;
	timesFailedFly = 1;
}

void HackerDetector::onTick(C_GameMode* gm) {
	auto player = g_Data.getLocalPlayer();
	if (player == nullptr) return;

	allowedOffGroundSpeed = 13.5f - strictness;
	allowedGroundSpeed = 14.5f - strictness;
	allowedTicks = 13 - strictness;

#pragma region Checks
	g_Data.forEachEntity([&](C_Entity* ent, bool b) {
		if (ent == nullptr) return;
	if (ent->getEntityTypeId() == 51 || ent->getEntityTypeId() == 1677999) return;
	if (ent->getEntityTypeId() == 80 || ent->getEntityTypeId() == 69) return;
	if (!g_Data.getLocalPlayer()->canAttack(ent, false)) return;
	if (!g_Data.getLocalPlayer()->isAlive()) return;
	if (!TargetUtil::isValidTarget(ent)) return;
	if (ent == g_Data.getLocalPlayer()) return;
	if (!ent->isAlive()) return;

	if (g_Data.canUseMoveKeys()) {
		if (player->onGround) { groundTicks++; offGroundTicks = 0; }
		else { offGroundTicks++; groundTicks = 0; }

		float velocityxz = ent->velocity.magnitudexz();
		float velocityxy = ent->velocity.magnitudexy();
		float velocity = ent->velocity.magnitude();
		int bps = (int)ent->getBlocksPerSecond();

		currSpeed = to_string((int)ent->getBlocksPerSecond()) + string(".") + to_string((int)(ent->getBlocksPerSecond() * 10) - ((int)ent->getBlocksPerSecond() * 10));
		name = ent->getNameTag()->getText(); name = Utils::sanitize(name); name = name.substr(0, name.find('\n'));
		if (name == "" || name == " ") name = "Invalid Name";

		C_TextPacket textPacket;
		textPacket.sourceName.setText(g_Data.getLocalPlayer()->getNameTag()->getText());
		textPacket.xboxUserId = to_string(g_Data.getLocalPlayer()->getUserId());

		// Speed Checks
		if (speedCheck) {
			char* speedAB = ent->onGround ? "A" : "B";
			if (bps >= allowedGroundSpeed || bps >= allowedOffGroundSpeed) {
				
				timesFailedSpeed++;
				if (timesFailedSpeed == 5) {
					clientMessageF("[Packet] %s%s%s has failed %sSpeed-%s (%s BPS)", GRAY, name.c_str(), WHITE, GRAY, speedAB, currSpeed.c_str());
				}
			}
			else timesFailedSpeed = 1;
		}

		// Derp Checks
		if (derpCheck) {
			string pitch = string(to_string(ent->pitch));
			string yaw = string(to_string(ent->yaw));

			if (ent->yaw <= -181 || ent->yaw >= 181 || ent->pitch >= 90 || ent->pitch <= -90 || ent->yaw - ent->bodyYaw > 185 || ent->bodyYaw - ent->yaw > 185) {
				
				timesFailedDerp++;
				if (timesFailedDerp == 2) {
					clientMessageF("[Packet] %s%s%s has failed %sInvalid (%s, %s)", GRAY, name.c_str(), WHITE, GRAY, pitch.c_str(), yaw.c_str());
				}

			}
			else timesFailedDerp = 1;
		}

		// Fly Checks
		if (flyCheck) {
			if (ent->onGround) return;

			// im not sure how fly checks work so ye
			if ((ent->velocity.y == 0 && velocityxz > 0.1) || velocityxz > 1) {
				timesFailedFly++;

				if (timesFailedFly == 3) {
					clientMessageF("[Packet] %s%s%s has failed %sFly (%s BPS)", GRAY, name.c_str(), WHITE, GRAY, currSpeed.c_str());
				}
			}
			else timesFailedFly = 0;
		}

		// Aura Checks
		if (auraCheck) {
			if (ent->getPos()->dist(player->getPos()->add(0, 0, 0)) < 7) {
				auto angle = ent->getPos()->CalcAngle(player->getPos()->add(0, 0, 0));
				auto yaw1 = angle.x - ent->yaw;
				auto yaw2 = ent->yaw - angle.x;
				string anglex = string(to_string(angle.x));
				string angley = string(to_string(angle.y));

				clientMessageF("[Packet] x:%s y:%s", anglex, angley);
				if ((yaw1 > 0 && yaw1 < 10) || (yaw2 > 0 && yaw2 < 10)) {
					timesFailedAura++;

					clientMessageF("[Packet] %s%s%s Flagged due aura x%s", GRAY, name.c_str(), WHITE, string(to_string(timesFailedAura)));

					if (timesFailedAura > 15) {
						clientMessageF("[Packet] %s%s%s has failed %sKillAura(yaw_diff:%s)", GRAY, name.c_str(), WHITE, GRAY, string(to_string(angle.y - ent->yaw)));
					}
				}
				else timesFailedAura = 0;
			}
		}
	}
		});
#pragma	endregion
}

void HackerDetector::onPlayerTick(C_Player* plr) {
	auto player = g_Data.getLocalPlayer();
	if (player == nullptr) return;

	// if u ever want hacker detector to be extra fast at detecting then put it here lol
	// butttt then rip ur chat
}