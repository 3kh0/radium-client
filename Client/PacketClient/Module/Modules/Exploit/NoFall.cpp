#include "NoFall.h"
#include "../pch.h"

using namespace std;
NoFall::NoFall() : IModule(0, Category::EXPLOIT, "Prevents you from taking fall damage") {
	registerEnumSetting("Mode", &mode, 0);
	mode.addEntry("Packet", 0);
	mode.addEntry("Motion", 1);
	mode.addEntry("Hive", 2);
	mode.addEntry("FastFall", 3);
	mode.addEntry("Blink", 4);
	registerIntSetting("Distance", &dist, dist, 0, 8);
	registerBoolSetting("Delayed", &delayed, delayed);
}

const char* NoFall::getRawModuleName() {
	return "NoFall";
}

const char* NoFall::getModuleName() {
	name = string("NoFall ") + string(GRAY) + mode.GetEntry(mode.getSelectedValue()).GetName();
	return name.c_str();
}

void NoFall::onTick(C_GameMode* gm) {
	auto player = g_Data.getLocalPlayer();
	if (player == nullptr) return;

	C_MovePlayerPacket groundpacket(g_Data.getLocalPlayer(), *g_Data.getLocalPlayer()->getPos());

	if (player->fallDistance <= dist)
		return;

	C_MovePlayerPacket p(g_Data.getLocalPlayer(), *g_Data.getLocalPlayer()->getPos());
	vec3_t blockBelowBF = g_Data.getLocalPlayer()->eyePos0;
	blockBelowBF.y -= g_Data.getLocalPlayer()->height;
	vec3_t pPos = g_Data.getLocalPlayer()->eyePos0;
	vec3_t blockBelow = player->eyePos0;
	blockBelowBF.y -= 1.5;
	blockBelow.y -= player->height;
	blockBelow.y -= 2.62f;
	vec3_t pos;

	switch (mode.getSelectedValue()) {
	case 0: // Packet
		p.onGround = true;
		g_Data.getClientInstance()->loopbackPacketSender->sendToServer(&p);
		break;
	case 1: // Motion
		gm->player->velocity.y = 0.0001f;
		gm->player->fallDistance = 0;
		break;
	case 2: // FlareonTest
		if (gm->player->region->getBlock(blockBelow.add(0, -1.62, 0))->toLegacy()->blockId != 0) {
			if (delayed && !TimerUtil::hasTimedElapsed(1000, true))
				return;
			gm->player->setPos(player->getPos()->add(0, 0.1, 0));
			p.onGround = true;
			g_Data.getClientInstance()->loopbackPacketSender->sendToServer(&p);
			gm->player->velocity.y = 0.0001f;
			gm->player->fallDistance = 0;
		}
		break;
		/* Archived for dumb nofall
	case 3: // Flareon
		C_MovePlayerPacket p(g_Data.getLocalPlayer(), *g_Data.getLocalPlayer()->getPos());
		g_Data.getClientInstance()->loopbackPacketSender->sendToServer(&p);
		break;
		*/
	case 3:
		if (gm->player->region->getBlock(blockBelow.add(0, -1.62, 0))->toLegacy()->blockId != 0) {
			if (delayed && !TimerUtil::hasTimedElapsed(1000, true))
				return;
			p.onGround = true;
			g_Data.getClientInstance()->loopbackPacketSender->sendToServer(&p);
			gm->player->velocity.y = -7;
			gm->player->fallDistance = 0;
		}
		break;
	case 4:
		if (gm->player->onGround) {
			auto pos = gm->player->getPos();
			pos->add(vec3_t(0, 1, 0));
			gm->player->setPos(*pos);
		}
	}
}